{"ast":null,"code":"var _jsxFileName = \"E:\\\\hadi\\\\react\\\\react-quiz\\\\src\\\\components\\\\pages\\\\Quiz.js\",\n    _s = $RefreshSig$();\n\nimport { getDatabase, ref, set } from \"firebase/database\";\nimport _ from \"lodash\";\nimport { useEffect, useReducer, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport useQuestions from \"../../hooks/useQuestions\";\nimport Answers from \"../Answers\";\nimport MiniPlayer from \"../MiniPlayer\";\nimport ProgressBar from \"../ProgressBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialState = null;\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"questions\":\n      action.value.forEach(question => {\n        question.options.forEach(option => {\n          option.checked = false;\n        });\n      });\n      return action.value;\n\n    case \"answer\":\n      const questions = _.cloneDeep(state);\n\n      questions[action.questionID].options[action.optionIndex].checked = action.value;\n      return questions;\n\n    default:\n      return state;\n  }\n};\n\nexport default function Quiz() {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const {\n    loading,\n    error,\n    questions\n  } = useQuestions(id);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [qna, dispatch] = useReducer(reducer, initialState);\n  const {\n    currentUser\n  } = useAuth();\n  const history = useHistory();\n  const {\n    location\n  } = history;\n  const {\n    state\n  } = location;\n  const {\n    videoTitle\n  } = state;\n  useEffect(() => {\n    dispatch({\n      type: \"questions\",\n      value: questions\n    });\n  }, [questions]);\n\n  function handleAnswerChange(e, index) {\n    dispatch({\n      type: \"answer\",\n      questionID: currentQuestion,\n      optionIndex: index,\n      value: e.target.checked\n    });\n  } // handle when user clicks the next button to get the next question\n\n\n  function nextQuestion() {\n    if (currentQuestion + 1 < questions.length) {\n      setCurrentQuestion(prevCurrent => prevCurrent + 1);\n    }\n  } // handle when user clicks the prev button to get back to the previous question\n\n\n  function prevQuestion() {\n    if (currentQuestion >= 1 && currentQuestion <= questions.length) {\n      setCurrentQuestion(prevCurrent => prevCurrent - 1);\n    }\n  } // submit quiz\n\n\n  async function submit() {\n    const {\n      uid\n    } = currentUser;\n    const db = getDatabase();\n    const resultRef = ref(db, `result/${uid}`);\n    await set(resultRef, {\n      [id]: qna\n    });\n    history.push({\n      pathname: `/result/${id}`,\n      state: {\n        qna\n      }\n    });\n  } // calculate percentage of progress\n\n\n  const percentage = questions.length > 0 ? (currentQuestion + 1) / questions.length * 100 : 0;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading ...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"There was an error!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }, this), !loading && !error && qna && qna.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: qna[currentQuestion].title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Question can have multiple answers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Answers, {\n        input: true,\n        options: qna[currentQuestion].options,\n        handleChange: handleAnswerChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n        next: nextQuestion,\n        prev: prevQuestion,\n        submit: submit,\n        progress: percentage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MiniPlayer, {\n        id: id,\n        title: videoTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n}\n\n_s(Quiz, \"PrgkvE74DWryeGcCwc45T0xJo/g=\", false, function () {\n  return [useParams, useQuestions, useAuth, useHistory];\n});\n\n_c = Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["E:/hadi/react/react-quiz/src/components/pages/Quiz.js"],"names":["getDatabase","ref","set","_","useEffect","useReducer","useState","useHistory","useParams","useAuth","useQuestions","Answers","MiniPlayer","ProgressBar","initialState","reducer","state","action","type","value","forEach","question","options","option","checked","questions","cloneDeep","questionID","optionIndex","Quiz","id","loading","error","currentQuestion","setCurrentQuestion","qna","dispatch","currentUser","history","location","videoTitle","handleAnswerChange","e","index","target","nextQuestion","length","prevCurrent","prevQuestion","submit","uid","db","resultRef","push","pathname","percentage","title"],"mappings":"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","sourcesContent":["import { getDatabase, ref, set } from \"firebase/database\";\r\nimport _ from \"lodash\";\r\nimport { useEffect, useReducer, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\nimport useQuestions from \"../../hooks/useQuestions\";\r\nimport Answers from \"../Answers\";\r\nimport MiniPlayer from \"../MiniPlayer\";\r\nimport ProgressBar from \"../ProgressBar\";\r\n\r\nconst initialState = null;\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"questions\":\r\n      action.value.forEach((question) => {\r\n        question.options.forEach((option) => {\r\n          option.checked = false;\r\n        });\r\n      });\r\n      return action.value;\r\n    case \"answer\":\r\n      const questions = _.cloneDeep(state);\r\n      questions[action.questionID].options[action.optionIndex].checked =\r\n        action.value;\r\n\r\n      return questions;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default function Quiz() {\r\n  const { id } = useParams();\r\n  const { loading, error, questions } = useQuestions(id);\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n\r\n  const [qna, dispatch] = useReducer(reducer, initialState);\r\n  const { currentUser } = useAuth();\r\n  const history = useHistory();\r\n  const { location } = history;\r\n  const { state } = location;\r\n  const { videoTitle } = state;\r\n\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: \"questions\",\r\n      value: questions,\r\n    });\r\n  }, [questions]);\r\n\r\n  function handleAnswerChange(e, index) {\r\n    dispatch({\r\n      type: \"answer\",\r\n      questionID: currentQuestion,\r\n      optionIndex: index,\r\n      value: e.target.checked,\r\n    });\r\n  }\r\n\r\n  // handle when user clicks the next button to get the next question\r\n  function nextQuestion() {\r\n    if (currentQuestion + 1 < questions.length) {\r\n      setCurrentQuestion((prevCurrent) => prevCurrent + 1);\r\n    }\r\n  }\r\n\r\n  // handle when user clicks the prev button to get back to the previous question\r\n  function prevQuestion() {\r\n    if (currentQuestion >= 1 && currentQuestion <= questions.length) {\r\n      setCurrentQuestion((prevCurrent) => prevCurrent - 1);\r\n    }\r\n  }\r\n\r\n  // submit quiz\r\n  async function submit() {\r\n    const { uid } = currentUser;\r\n\r\n    const db = getDatabase();\r\n    const resultRef = ref(db, `result/${uid}`);\r\n\r\n    await set(resultRef, {\r\n      [id]: qna,\r\n    });\r\n\r\n    history.push({\r\n      pathname: `/result/${id}`,\r\n      state: {\r\n        qna,\r\n      },\r\n    });\r\n  }\r\n\r\n  // calculate percentage of progress\r\n  const percentage =\r\n    questions.length > 0 ? ((currentQuestion + 1) / questions.length) * 100 : 0;\r\n\r\n  return (\r\n    <>\r\n      {loading && <div>Loading ...</div>}\r\n      {error && <div>There was an error!</div>}\r\n      {!loading && !error && qna && qna.length > 0 && (\r\n        <>\r\n          <h1>{qna[currentQuestion].title}</h1>\r\n          <h4>Question can have multiple answers</h4>\r\n          <Answers\r\n            input\r\n            options={qna[currentQuestion].options}\r\n            handleChange={handleAnswerChange}\r\n          />\r\n          <ProgressBar\r\n            next={nextQuestion}\r\n            prev={prevQuestion}\r\n            submit={submit}\r\n            progress={percentage}\r\n          />\r\n          <MiniPlayer id={id} title={videoTitle} />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}