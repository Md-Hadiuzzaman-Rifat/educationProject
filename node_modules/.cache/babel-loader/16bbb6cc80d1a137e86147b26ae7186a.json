{"ast":null,"code":"var _jsxFileName = \"E:\\\\hadi\\\\react\\\\react-quiz\\\\src\\\\components\\\\pages\\\\Result.js\",\n    _s = $RefreshSig$();\n\nimport _ from \"lodash\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport useAnswers from \"../../hooks/useAnswers\";\nimport Analysis from \"../Analysis\";\nimport Summary from \"../Summary\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Result() {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const {\n    location\n  } = useHistory();\n  const {\n    state\n  } = location;\n  const {\n    qna\n  } = state;\n  const {\n    loading,\n    error,\n    answers\n  } = useAnswers(id);\n\n  function calculate() {\n    let score = 0;\n    answers.forEach((question, index1) => {\n      let correctIndexes = [],\n          checkedIndexes = [];\n      question.options.forEach((option, index2) => {\n        if (option.correct) correctIndexes.push(index2);\n\n        if (qna[index1].options[index2].checked) {\n          checkedIndexes.push(index2);\n          option.checked = true;\n        }\n      });\n\n      if (_.isEqual(correctIndexes, checkedIndexes)) {\n        score = score + 5;\n      }\n    });\n    return score;\n  }\n\n  const userScore = calculate();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"There was an error!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }, this), answers && answers.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Summary, {\n        score: userScore,\n        noq: answers.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Analysis, {\n        answers: answers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n}\n\n_s(Result, \"mNjB2bf8thh9moQAS6n1BMxmIUQ=\", false, function () {\n  return [useParams, useHistory, useAnswers];\n});\n\n_c = Result;\n\nvar _c;\n\n$RefreshReg$(_c, \"Result\");","map":{"version":3,"sources":["E:/hadi/react/react-quiz/src/components/pages/Result.js"],"names":["_","useHistory","useParams","useAnswers","Analysis","Summary","Result","id","location","state","qna","loading","error","answers","calculate","score","forEach","question","index1","correctIndexes","checkedIndexes","options","option","index2","correct","push","checked","isEqual","userScore","length"],"mappings":";;;AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,kBAAtC;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,OAAP,MAAoB,YAApB;;;AAEA,eAAe,SAASC,MAAT,GAAkB;AAAA;;AAC/B,QAAM;AAAEC,IAAAA;AAAF,MAASL,SAAS,EAAxB;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAeP,UAAU,EAA/B;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAYD,QAAlB;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAUD,KAAhB;AAEA,QAAM;AAAEE,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA8BV,UAAU,CAACI,EAAD,CAA9C;;AAEA,WAASO,SAAT,GAAqB;AACnB,QAAIC,KAAK,GAAG,CAAZ;AAEAF,IAAAA,OAAO,CAACG,OAAR,CAAgB,CAACC,QAAD,EAAWC,MAAX,KAAsB;AACpC,UAAIC,cAAc,GAAG,EAArB;AAAA,UACEC,cAAc,GAAG,EADnB;AAGAH,MAAAA,QAAQ,CAACI,OAAT,CAAiBL,OAAjB,CAAyB,CAACM,MAAD,EAASC,MAAT,KAAoB;AAC3C,YAAID,MAAM,CAACE,OAAX,EAAoBL,cAAc,CAACM,IAAf,CAAoBF,MAApB;;AACpB,YAAIb,GAAG,CAACQ,MAAD,CAAH,CAAYG,OAAZ,CAAoBE,MAApB,EAA4BG,OAAhC,EAAyC;AACvCN,UAAAA,cAAc,CAACK,IAAf,CAAoBF,MAApB;AACAD,UAAAA,MAAM,CAACI,OAAP,GAAiB,IAAjB;AACD;AACF,OAND;;AAQA,UAAI1B,CAAC,CAAC2B,OAAF,CAAUR,cAAV,EAA0BC,cAA1B,CAAJ,EAA+C;AAC7CL,QAAAA,KAAK,GAAGA,KAAK,GAAG,CAAhB;AACD;AACF,KAfD;AAiBA,WAAOA,KAAP;AACD;;AAED,QAAMa,SAAS,GAAGd,SAAS,EAA3B;AAEA,sBACE;AAAA,eACGH,OAAO,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADd,EAEGC,KAAK,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFZ,EAIGC,OAAO,IAAIA,OAAO,CAACgB,MAAR,GAAiB,CAA5B,iBACC;AAAA,8BACE,QAAC,OAAD;AAAS,QAAA,KAAK,EAAED,SAAhB;AAA2B,QAAA,GAAG,EAAEf,OAAO,CAACgB;AAAxC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,QAAD;AAAU,QAAA,OAAO,EAAEhB;AAAnB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA,oBALJ;AAAA,kBADF;AAaD;;GA9CuBP,M;UACPJ,S,EACMD,U,EAIeE,U;;;KANdG,M","sourcesContent":["import _ from \"lodash\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport useAnswers from \"../../hooks/useAnswers\";\r\nimport Analysis from \"../Analysis\";\r\nimport Summary from \"../Summary\";\r\n\r\nexport default function Result() {\r\n  const { id } = useParams();\r\n  const { location } = useHistory();\r\n  const { state } = location;\r\n  const { qna } = state;\r\n\r\n  const { loading, error, answers } = useAnswers(id);\r\n\r\n  function calculate() {\r\n    let score = 0;\r\n\r\n    answers.forEach((question, index1) => {\r\n      let correctIndexes = [],\r\n        checkedIndexes = [];\r\n\r\n      question.options.forEach((option, index2) => {\r\n        if (option.correct) correctIndexes.push(index2);\r\n        if (qna[index1].options[index2].checked) {\r\n          checkedIndexes.push(index2);\r\n          option.checked = true;\r\n        }\r\n      });\r\n\r\n      if (_.isEqual(correctIndexes, checkedIndexes)) {\r\n        score = score + 5;\r\n      }\r\n    });\r\n\r\n    return score;\r\n  }\r\n\r\n  const userScore = calculate();\r\n\r\n  return (\r\n    <>\r\n      {loading && <div>Loading...</div>}\r\n      {error && <div>There was an error!</div>}\r\n\r\n      {answers && answers.length > 0 && (\r\n        <>\r\n          <Summary score={userScore} noq={answers.length} />\r\n          <Analysis answers={answers} />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}